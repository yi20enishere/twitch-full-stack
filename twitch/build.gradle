

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
}


group = 'com.laioffer'
version = '0.0.1-SNAPSHOT'


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


repositories {
    mavenCentral()
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2025.0.0"
    }
}

// gradle 里面最重要的就是dependencies
// build.gradle = 用声明式脚本把“怎么把源码变成可运行/可发布的产物”这件事说清楚；Gradle 按它办事。
dependencies {
    implementation 'net.datafaker:datafaker:2.2.2'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.+'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


tasks.named('test') {
    useJUnitPlatform()
}
// gradle所有的配置文件
// build.gradle是放：配置dependency的, 告诉构建系统怎么编译、打包、测试、发布你的项目。
// 你写的不是代码逻辑，而是“该如何构建代码”。
// 更新build.gradle之后，要点一下大象icon，刷新gradle
// 具体管啥:
//🔌 plugins：启用构建能力（比如 java、application、org.springframework.boot、com.android.application）。
//📦 repositories / dependencies：去哪儿找库、要哪些库（mavenCentral()、implementation("...")）。
//🧱 source sets / compile options：源码目录、JDK 版本、编译参数。
//🧪 test：测试框架与测试任务配置。
//🏗️ tasks：自定义构建任务（如代码生成、打包前后钩子）。
//🔐 publishing / signing：发布到仓库、签名产物。
//🧰 versioning / env：版本号、构建变量、环境区分。
